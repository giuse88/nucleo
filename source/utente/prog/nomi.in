#include <sys.h>
#include <lib.h>
#include <string.h> 
#include <direntry.h>

#define TERMINALE 2
#define NOMI_LUNGHI 29
#define NOMI_SIMILI 15
process proc_nomi body nomi(2), 12, LIV_UTENTE;



const char * nomi_lunghi[NOMI_LUNGHI]={
			  "a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
			  "b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
			  "c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
			  "d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
			  "e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
			  "f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
			  "g0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
			  "h0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
			  "i0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
			  "l0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
			  "m0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
			  "n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",  
			  "o00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",// 12
			  "p0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
			  "q0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
			  "r0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
			  "s0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
			  "t0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
			  "u0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
			  "v0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
			  "z0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
			  "x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
			  "y0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
			  "k0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
			  "pppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppp",
			  "j0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
			  "aa000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
			  "bb000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
			  "cc000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
			  };

const char * nome_test2[]={"10000000000000",
			  "200000000000000000000",
			  "3000000000000000000000000000"
			  "40000000000000000000000000000000000",
			  "50000000000000000000000000000000000000000",
			  "600000000000000000000000000000000000000000000000",
			  "700000000000000000000000000000000000000000000000000000",
			  "80000000000000000000000000000000000000000000000000000000000000",
			  "110000000000",
		      "5500000000000000000000000000000000000000GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG00000000000000",
			  
			  };


const char * sim [NOMI_SIMILI]={ 
			"aaaaaaaaaaaaaaaaaaaaaaaaaaa1",
			"aaaaaaaaaaaaaaaaaaaaaaaaaaa2",
			"aaaaaaaaaaaaaaaaaaaaaaaaaaa3",
			"aaaaaaaaaaaaaaaaaaaaaaaaaaa4",
			"aaaaaaaaaaaaaaaaaaaaaaaaaaa5",
			"aaaaaaaaaaaaaaaaaaaaaaaaaaa6",
			"aaaaaaaaaaaaaaaaaaaaaaaaaaa7",
			"aaaaaaaaaaaaaaaaaaaaaaaaaaa8",
			"aaaaaaaaaaaaaaaaaaaaaaaaaaa9",
			"aaaaaaaaaaaaaaaaaaaaaaaaaaa10",
			"aaaaaaaaaaaaaaaaaaaaaaaaaaa11",
			"aaaaaaaaaaaaaaaaaaaaaaaaaaa12",
			"aaaaaaaaaaaaaaaaaaaaaaaaaaa13",
			"aaaaaaaaaaaaaaaaaaaaaaaaaaa14",
			"aaaaaaaaaaaaaaaaaaaaaaaaaaa15",
};

process_body nomi(int a) {

  char buf[5]; 
  int fd=-1; 
  
   
  printf(TERMINALE, "Programma test nomi\n" ); 
  printf(TERMINALE, "Premi ENTER per iniziare....\n");
  
  memset(buf, 0, 5); 
  readvterm_ln(a, buf, 5);
  
  if ( mkdir ("Nomi_Lunghi") < 0 ) {
      perror(a,"Mkdir"); 
      return; 
  }

  if ( chdir("Nomi_Lunghi") < 0 ) { 
    perror(a,"chdir"); 
    return; 
  }

  // creazione nomi 

  for ( int i=0; i< NOMI_LUNGHI ; i++)     
	if ( (fd=open(nomi_lunghi[i], O_CREAT )) < 0 ) {
	    perror(a, "CREATE"); 
	}else {
	   printf(a, "Creato nome %s\n", nomi_lunghi[i]);
	   close(fd); 
	}

  printf(a, "Nomi creati\n");
  printf(a, "Premere Enter Per iniziare la cancellazione...\n"); 
  memset(buf, 0, 5); 
  readvterm_ln(a, buf, 5);

   for ( int i=0; i< NOMI_LUNGHI ; i++)
	if ( remove(nomi_lunghi[i]) < 0 ) 
	     perror(a,"Remove"); 
	else 
	    printf(a, "Eliminato file %s\n", nomi_lunghi[i]); 
      
    if ( chdir("..") < 0 ) { 
	perror(a,"chdir"); 
	return; 
    }
	
    if (rmdir("Nomi_Lunghi") < 0) {
        perror(a,"Rmdir"); 
	return; 
    }
  
  printf(a, "\nNomi Eliminati\n");
  printf(a, "Premere Enter Per iniziare la creazione dei nomi Simili...\n"); 
  memset(buf, 0, 5); 
  readvterm_ln(a, buf, 5);
  
  
  if ( mkdir ("Nomi_simili") < 0 ) {
      perror(a,"Mkdir"); 
      return; 
  }

  if ( chdir("Nomi_simili") < 0 ) { 
    perror(a,"chdir"); 
    return; 
  }

  // creazione nomi 

  for ( int i=0; i< NOMI_SIMILI ; i++)     
	if ( (fd=open(sim[i], O_CREAT )) < 0 ) {
	    perror(a, "CREATE"); 
	}else {
	   printf(a, "Creato nome %s\n", sim[i]);
	   close(fd); 
	}

  printf(a, "Nomi creati\n");
  printf(a, "Premere Enter Per iniziare la cancellazione...\n"); 
  memset(buf, 0, 5); 
  readvterm_ln(a, buf, 5);

   for ( int i=0; i< NOMI_SIMILI ; i++)
	if ( remove(sim[i]) < 0 ) 
	     perror(a,"Remove"); 
	else 
	    printf(a, "Eliminato file %s\n", sim[i]); 
      
    if ( chdir("..") < 0 ) { 
	perror(a,"chdir"); 
	return; 
    }
	
    if (rmdir("Nomi_simili") < 0) {
        perror(a,"Rmdir"); 
	return; 
    }
  
    
	
}