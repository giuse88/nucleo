#include "string.h"
#include "stdarg.h" 

/*funzione di conversione */ 

static const char hex_map[16] = { '0', '1', '2', '3', '4', '5', '6', '7',
				  '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };
static const char hex_map_upper[16] = { '0', '1', '2', '3', '4', '5', '6', '7',
				  '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };

void htostr(char *buf, natl l, int cifre)
{
  int i=0; 
  for ( i = cifre - 1; i >= 0; --i) {
    buf[i] = hex_map[l % 16];
    l /= 16;
  }
}

void htostr_upper(char *buf, natl l, int cifre)
{
  int i=0; 
  for ( i = cifre - 1; i >= 0; --i) {
    buf[i] = hex_map_upper[l % 16];
    l /= 16;
  }
}

void itostr(char *buf, unsigned int len, long l)
{
  natl i, div = 1000000000, v, w = 0;

  if(l == (-2147483647 - 1)) {
    strncpy(buf, "-2147483648", 12);
    return;
  } else if(l < 0) {
    buf[0] = '-';
    l = -l;
    i = 1;
  } else if(l == 0) {
    buf[0] = '0';
    buf[1] = 0;
    return;
  } else
    i = 0;

  while(i < len - 1 && div != 0) {
    if((v = l / div) || w) {
      buf[i++] = '0' + (char)v;
      w = 1;
    }

    l %= div;
    div /= 10;
  }

  buf[i] = 0;
}


/*gestione memoria*/

// copia n byte da src a dest
void *memcpy(void *dest, const void *src, size_t n)
{
  char       *dest_ptr = (char*)(dest);
  const char *src_ptr  = (const char*)(src);
  natl i=0, j=0; 

  if (src_ptr < dest_ptr && src_ptr + n > dest_ptr)
    for ( i = n - 1; i >= 0; i--)
      dest_ptr[i] = src_ptr[i];
  else
    for (j = 0; j < n;j++)
      dest_ptr[j] = src_ptr[j];

  return dest;
}

// scrive n byte pari a c, a partire da dest
void *memset(void *dest, int c, size_t n)
{
  char *dest_ptr = (char*)(dest);
  natl i=0; 

  for (i = 0; i < n; i++)
    dest_ptr[i] = (char)(c);

  return dest;
}

/*Copies the values of num bytes from the 
location pointed by source to the memory
 block pointed by destination. Copying
 takes place as if an intermediate buffer
 was used, allowing the destination and
 source to overlap. */ 

void *memmove(void *dst, const void *src, size_t count)
{
  char *a = (char*)dst;
  const char *b = (const char *)src;
  if (src!=dst)
  {
    if (src>dst)
    {
      while (count--) *a++ = *b++;
    }
    else
    {
      a+=count-1;
      b+=count-1;
      while (count--) *a-- = *b--;
    }
  }
  return dst;
}


int memcmp(const void *dst, const void *src, size_t count) {
  register int r;
  register const unsigned char *d=dst;
  register const unsigned char *s=src;
  ++count;
  while ((--count)) {
    if (!(r=(*d - *s)))
      return r;
    ++d;
    ++s;
  }
  return 0;
}

void* memchr(const void *s, int c, size_t n) {
  const unsigned char *pc = (unsigned char *) s;
  for (;n--;pc++)
    if (*pc == c)
      return ((void *) pc);
  return 0;
}


/*************FINE GESTIONE MEMORIA*********************/


/*************FINE GESTIONE MEMORIA*********************/


char *
strcpy (char *s1, const char *s2)
{
    char           *res = s1;
    while ((*s1++ = *s2++));
    return (res);
}


char *strncpy(char *dest, const char *src, size_t l)
{
  unsigned long i;

  for(i = 0; i < l && src[i]; ++i)
    dest[i] = src[i];

  return dest;
}


int
strcmp (const char *s1, const char *s2)
{
    while (*s1 && *s1 == *s2)
        s1++, s2++;
    return (*s1 - *s2);
}


int strncmp(const char *s1, const char *s2, size_t n) {
  register const unsigned char* a=(const unsigned char*)s1;
  register const unsigned char* b=(const unsigned char*)s2;
  register const unsigned char* fini=a+n;
  while (a<fini) {
    register int res=*a-*b;
    if (res) return res;
    if (!*a) return 0;
    ++a; ++b;
  }
  return 0;
}


char* strcat(register char* s,register const char* t)
{
  char *dest=s;
  s+=strlen(s);
  for (;;) 
    if (!(*s = *t)) break; ++s; ++t;
  
  return dest;
}


char *strncat(char *s, const char *t, size_t n) {
  char *dest=s;
  register char *max;
  s+=strlen(s);
  if (((max=s+n)==s)) goto fini;
  for (;;) {
    if ((!(*s = *t))) break;
    if ((++s==max)) break; 
    ++t;
  }
  *s=0;
fini:
  return dest;
}


size_t strlen(const char *s)
{
  natl l = 0;

  while(*s++)
    ++l;

  return l;
}



size_t  strnlen(const char *s , size_t max)
{
  natl l = 0;

  while(*s++ && l < max)
    ++l;

  return l;
}


char *strchr(register const char *t, int c) {
  register char ch;

  ch = c;
  for (;;) {
    if ((*t == ch)) break;
    if ((!*t)) return 0;
    ++t;
 }
  return (char*)t;
}

char *strrchr(const char *t, int c) {
  register char ch;
  register const char *l=0;
  ch = c;
  for (;;) {
    if ((*t == ch)) l=t; 
    if ((!*t))
      return (char*)l;
    ++t;
  }
  return (char*)l;
}


char *strstr(const char *haystack, const char *needle) {
  size_t nl=strlen(needle);
  size_t hl=strlen(haystack);
  size_t i;
  if (!nl) goto found;
  if (nl>hl) return 0;
  for (i=hl-nl+1; (i); --i) {
    if (*haystack==*needle && !memcmp(haystack,needle,nl))
found:
      return (char*)haystack;
    ++haystack;
  }
  return 0;
}


size_t strspn(const char *s, const char *accept)
{
  size_t l = 0;
  const char *a;

  for (; *s; s++) {
    for (a = accept; *a && *s != *a; a++);

    if (!*a)
      break;
    else
     l++;
  }

  return l;
}



size_t strcspn(const char *s, const char *reject)
{
  size_t l=0;
  int i;

  for (; *s; ++s) {
    for (i=0; reject[i]; ++i)
      if (*s==reject[i]) return l;
    ++l;
  }
  return l;
}



char *strpbrk(const char *s, const char *accept) {
  register unsigned int i;
  for (; *s; s++)
    for (i=0; accept[i]; i++)
      if (*s == accept[i])
	return (char*)s;
  return 0;
}


char *strsep(char **stringp, const char *delim) {
  register char *tmp=*stringp;
  register char *tmp2=tmp;
  register const char *tmp3;
  if (!*stringp) return 0;
  for (tmp2=tmp; *tmp2; ++tmp2) {
    for (tmp3=delim; *tmp3; ++tmp3)
      if (*tmp2==*tmp3) {	/* delimiter found */
	*tmp2=0;
	*stringp=tmp2+1;
	return tmp;
      }
  }
  *stringp=0;
  return tmp;
}


static char *strtok_pos;

char *strtok(char *s, const char *delim)
{
  return strtok_r(s,delim,&strtok_pos);
}

char*strtok_r(char*s,const char*delim,char**ptrptr) {
  char*tmp=0;

  if (s==0) s=*ptrptr;
  s+=strspn(s,delim);		/* overread leading delimiter */
  if ((*s)) {
    tmp=s;
    s+=strcspn(s,delim);
    if ((*s)) *s++=0;	/* not the end ? => terminate it */
  }
  *ptrptr=s;
  return tmp;
}


int strnicmp(const char *s1, const char *s2, size_t n) {
  register const unsigned char* a=(const unsigned char*)s1;
  register const unsigned char* b=(const unsigned char*)s2;
  register const unsigned char* fini=a+n;
  while (a<fini) {
    register int res=UPPER(*a)-UPPER(*b);
    if (res) return res;
    if (!*a) return 0;
    ++a; ++b;
  }
  return 0;
}

inline int UPPER(int c){
  return ((c>96 && c<123)?(c-32):c);
  
}

int sprintf(char *dest,const char *format,...)
{
  int n;
  va_list arg_ptr;
  va_start(arg_ptr, format);
  n=vsnprintf(dest,strlen(dest),format,arg_ptr);
  va_end (arg_ptr);
  return n;
}

inline int isalpha(int c) { 
 
  if ( (c > 64 && c < 91) || (c >96 && c < 122 )) 
      return c; 
  else 
    return 0; 
  
}
