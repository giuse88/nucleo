

/**************************************************************FILE SYSTEM ***********************************/

#include "fat.h"
#include "fs.h" 
#include "type.h"
#include "sistema.h" 
#include "volumi.h"
#include "system_call.h" 
#include "data.h"
#include "direntry.h" 
#include "fs.h" 
#include "errno.h" 

BOOL fs_init(); 


/*STRUTTURE DATI GBOLBALI */
TABELLA_VOLUMI * tabella=NULL; 
FCB * root=NULL; 

struct _fs_info_{ 
      char curret_direcorty[260]; 
      unsigned char  volume; 
      void * local_table_file; 
      void * global_table_file; 
};

typedef struct _fs_info_ fs_info; 


void test_sistema() { 
 
    char * test=NULL; 
  

  
  flog(LOG_WARN, "ENRICO (%s-line%d)",__FILE__,__LINE__); 
  
  
}


// funzione che inizializza la struttura globale presente nel modulo sistema

BOOL init_fs_io_state() { 
    
  
    byte *buf=NULL; 
    dword size = SIZE_VOLUME+MAX_PATH+ (sizeof(FCB) *MAX_FILE); 
    const char * pwd="/"; 
    dword r=0; 
    
    if (!tabella) { 
	set_errno(6, "Non presente tabella volumi"); 
	 return FALSE; 
    }
    
    flog(LOG_DEBUG, "SIZE %d", size); 
    buf=mem_alloc(size, 4); 
    if (!buf) { 
	set_errno(ENOMEM, "Memoria esaurita"); 
	return FALSE; 
    }
    
    memset(buf, 0 , size); 
    *(buf+ADDR_VOLUME)=tabella->label; 
    strncpy((char*)(buf+ADDR_PWD), pwd, 1); 
    
    //primitiva di sistema 
    if((r=io_space_init(buf,size))) {
      set_errno(r, "Io space init errore : %d", r); 
      return FALSE; 
    }
    
    return TRUE; 
    
}


void test_fat( byte label); 

/* Pubblica FUNZIONE 
 * Questa funzione ha lo scopo di inizializzare il FS mediante delle chiamate 
 * hai vari moduli di cui è composto il fs. Se attiva la macro DEBUG_FS esegue
 * dei test sui vari oggetti che lo compongono.
 * Può fallire quando fallisce la chiamata di un sotto modulo. 
 */ 
BOOL  fs_init(void){ 

  
  flog(LOG_INFO, "Inizialiazzazione FILE SYSTEM "); 

  // chiamata per la creazione della tabella dei volumi 
  if(!(tabella=crea_tabella_volumi())) {
      perror("Creazione tabella volumi fallita"); 
      return FALSE; 
  }

#ifdef DEBUG_FS 
  stampa_tabella_volumi('C');
#endif 
  
  // carico fat in memoria 
  if(!( init_fat())){
      perror("Caricamento FAT fallito"); 
      return FALSE; 
  }
  
#ifdef DEBUG_FS 
  test_fat('C'); 
#endif

  
  //stampa_tabella_volumi(tabella);   //DEBUG
  //flog(LOG_INFO, " aaa : %x", getNext(tabella->fat, 2)); 
  //get_dir_entry('C', 2); 
  //create_dir_entry('C', 2, "a.txtllll"); 
 
//  test_write('C'); 

//	     stampa_fat('C', 2); 
	     
  
//  test_dir('C');
  
 // test_sistema();
  
  if(init_fs_io_state()) 
      flog(LOG_INFO,"Inizializata area IOSPACE");
  else 
    perror("Inizialiazzazione IOSPACE fallita "); 
  
 
// test_system_call(); 
  
  flog(LOG_INFO,"Fine inizializzazione FILE SYSTEM"); 


  return TRUE; 
}






