\chapter{ Modifiche Introdotte sul nucleo}
\label{cap:Modifiche}
Il file system è un componente complesso del modulo IO, per far fronte a tutte le esigenze di questo componente è stato necessario introdurre alcune modifiche e nuove funzionalità ai moduli di sistema e IO.
Senza l'introduzione di tali modifiche non sarebbe stato possibile realizzare il supporto al file system FAT32, ma nonostante ciò queste non fanno parte del file system.\\	

 \section{Modifiche modulo Sistema}
 Il modulo sistema è il modulo principale del nucleo. Questo modulo viene caricato dal boot loader ed esegue l'inizializzazione delle principali caratteristiche del nucleo quali: la gestione dei processi, la gestione della memoria virtuale, la gestione dei semafori e poi carica i restanti moduli. 
 Le modifiche introdotte su questo modulo riguardano principalmente due aspetti: la gestione dell'hard disk e l'introduzione di una area riservata per ogni processo. 
 \subsection{Hard Disk}
 Il driver dell'hard disk è inserito nel modulo sistema, in quanto necessario per una corretta gestione dell'area di swap. Le modifiche introdotte riguardano la gestione dei volumi di un disco che era assente.Le primitive presenti supportano le operazioni di scrittura e lettura sul disco ma senza aver coscienza del volume sul quale si sta lavorando.\\
 Per un corretto funzionamento del filesystem è stato necessario introdurre delle primitive accessibili solamente a livello sistema che mi hanno permesso di identificare quali volumi sono presenti sul disco ed effettuare operazioni di lettura e scrittura su questi. 
  \begin{description}
   \item[get\_partizione]
   E' una primitiva a livello sistema che permette di accedere alla lista delle partizioni presenti nella memoria del modulo sistema, altrimenti inaccessibile dal modulo IO in quanto  
   non collegati tra di loro. Questa primitiva riporta un indice univoco mediante il quale è possibile riferire la partizione all'interno del disco.
   \end{description}
  \begin{description}
   \item[write\_part\_n]
    Primitiva a livello sistema che permette di eseguire le operazioni di scrittura sulle varie partizioni presenti sul disco.
    Per poter identificare la partizione in modo univoco, associate alle informazioni attinenti il canale ATA e il DRIVER, si deve indicare l'indice
    ottenuto dalla primitiva get\_partizione.
  \end{description}
   \begin{description}
   \item[read\_part\_n]
    Primitiva a livello sistema che permette di eseguire le operazioni lettura sulle varie partizioni presenti sul disco.
    Per poter identificare la partizione in modo univoco, associate alle informazioni attinenti il canale ATA e il DRIVER, si deve indicare l'indice
    ottenuto dalla primitiva get\_partizione.
  \end{description}
  \subsection{Area privata processo}
  \label{AreaPrivataProcesso}
  Il file system per poter gestire correttamente i file e le directory ha la necessità di associare delle informazioni private ad ogni processo. Il nucleo non supportava questa possibilità, quindi è stato necessario introdurre un meccanismo che permettesse di gestire quest'area privata dallo spazio IO.\\
  La prima modifica introdotta riguarda il descrittore di processo nel quale sono stati introdotti dei campi aggiuntivi che permettono di associare e gestire l'area privata di ogni processo.\\
  Le modifiche introdotte sono le seguenti : \\
  
\begin{code}
      natl  p_id; 	    // id del processo padre
      void* iostate;        // puntatore area riservata  
      natl  iostate_size;   // grandezza area riservata 
\end{code}
 

  La prima questione da affrontare, una volta inserite queste modifiche, è come e con quali valori l'area deve essere inizializzata. L'area privata di un processo viene inizializzata durante la creazione del processo copiando i valori contenuti nell'area del processo padre, se questa è presente. \\
  Se l'area del processo padre non è presente, si copiano i valori di default contenuti nell'area di memoria globale inserita nel modulo sistema ed individuata dal puntatore \textit{io\_global\_info}, se è stata inizializzata. Se non è presente nessun area globale, l'area privata del processo non viene inizializzata.\newpage
  Per supportare la procedura sopraccitata ho modificato la crea\_processo nel seguente modo. \\
  
 \begin{code}
	pdes_proc->p_id = esecuzione->id;
 	father_proc=des_p(esecuzione->id); 
	
	// non puo esistere la condizione nella
	// quale le informazioni globali non sono  
	// inizzializatementre quelle del padre si,
	// il contrario invece puo capitare
	// ( processo main ) 

 	if(io_global_info && io_global_size 
	      && father_proc->iostate &&
	      father_proc->iostate_size ) { 
 	    // copio le informazioni del padre 
  	    natl size=father_proc->iostate_size; 
  	    pdes_proc->iostate_size=size; 
  	    pdes_proc->iostate=alloca(size, 1); 
  	    if (!pdes_proc->iostate) goto errore6; 
  	    memset(pdes_proc->iostate, 0, size); 
  	    memcpy(pdes_proc->iostate,father_proc->iostate,size); 
   
 	}else if (io_global_info && io_global_size) { 
	   // se il padre non ha informazioni copio quelle globali 
	    pdes_proc->iostate_size=io_global_size; 
 	    pdes_proc->iostate=alloca(io_global_size, 1); 
 	    if (!pdes_proc->iostate) goto errore6; 
 	    memset(pdes_proc->iostate, 0, io_global_size); 
 	    memcpy( pdes_proc->iostate,io_global_info,io_global_size); 
	   
	} else {
	  //azzero le informazioni riguardanti l'area IO
	    pdes_proc->iostate=NULL; 
	    pdes_proc->iostate_size=0; 
	}
   }
  
\end{code}


  Questa area però deve anche essere dealocata, questo compito viene eseguito all'interno della \textit{distruggi\_processo}.\\
  Poiché l'area privata è stata inserita nello spazio di indirizzamento di sistema, per il file system e qualunque altro componente del modulo IO è impossibile accedere alle informazioni presenti nei descrittori di processo, e di conseguenza all'area privata.\\ 
  Per gestire quest'area in modo corretto ho inserito le seguenti primitive accessibili solo da livello sistema : 
  \begin{description}
   \item[c\_io\_space\_init]
    Primitiva che inizializza l'area globale presente nel modulo sistema. Questa primitiva alloca lo spazio necessario per inserire i valori ricevuti come parametri. 
  \end{description}
  \begin{description}
   \item[c\_io\_space\_read]
   Primitiva che consente di leggere dei valori nell'area privata di un processo, specificando un offset di interesse.
  \end{description}
    \begin{description}
   \item[c\_io\_space\_write]
   Primitiva che consente di scrivere dei valori nell'area privata di un processo, specificando un offset di interesse.
  \end{description}

  
 \section{Modifiche modulo IO}
 Nel modulo IO è inserito il file system che verrà discusso ampiamente nei prossimi capitoli, in questo paragrafo mi limito a mostrare le modifiche introdotte nel modulo IO non facenti parte del file system. \\
 Nel modulo IO le principali modifiche che ho introdotte sono: l'introduzione di un sistema per la gestione dell'ora e della data, l'introduzione di una semplice gestore degli errori e l'introduzione di  alcune librerie.
 \subsection{Data e ora}
 Il nucleo non possiede nessun meccanismo per ottenere ne l'ora corrente, ne la data corrente. Ogni computer è munito di un sistema per mantenere la data e l'ora dopo lo spegnimento del computer, questo sistema e formato da una memoria CMOS e da un RTC accessibili mediante delle porte di IO.\\
 Per usare questo dispositivo ho realizzato un piccolo driver gestito a controllo di programma che mi permette di leggere la data e l'ora contenute nei suoi registri e operare le opportune conversioni sui valori letti fornendomi un'interfaccia semplice ed omogenea.\\
 Per usufruire di questo meccanismo ho inserito due primitive accessibili anche da livello utente : 
 \begin{description}
  \item[get\_time]
    Primitiva di livello utente che riporta l'ora corrente. L'ora corrente viene restituita in un formato compatto, di grandezza pari a 4 byte, ogni byte assume un significato particolare. 
    \begin{itemize}
     \item Byte 0: Contiene il valore del secondo corrente espresso in formato binario. Range [0-59]. 
    \end{itemize}
    \begin{itemize}
     \item Byte 1: Contiene il valore del minuto espresso in formato binario. Range [0-59].  
    \end{itemize}
    \begin{itemize}
     \item Byte 2: Contiene il valore dell'ora corrente espresso in formato binario.Range [0-23].
    \end{itemize}
    \begin{itemize}
     \item Byte 3: Byte inutilizzato a disposizione.
    \end{itemize}
  \end{description}
  
  \ \begin{description}
  \item[get\_data]
    Primitiva di livello utente che riporta la data corrente. La data corrente viene restituita in un formato compatto, di grandezza pari a 4 byte, ogni byte assume un significato particolare. 
    \begin{itemize}
     \item Byte 0: Contiene il valore del giorno corrente espresso in formato binario. Range [1-31].   
    \end{itemize}
    \begin{itemize}
     \item Byte 1: Contiene il valore del mese corrente  espresso in formato binario. Range [1-12].
    \end{itemize}
    \begin{itemize}
     \item Byte 2: Contiene il valore dell'anno corrente espresso in formato binario. Range [0-99].
    \end{itemize}
    \begin{itemize}
     \item Byte 3: Byte inutilizzato a disposizione.
    \end{itemize}
  \end{description}
 
\section {Librerie}
 \label{lib}
  Data l'ampiezza del progetto è stato necessario implementare delle librerie più meno standard che utilizzo in quasi tutti i moduli. 
  Le librerie introdotte vengono linkate al modulo IO, quindi sono disponibili per tutto il sistema IO.
  
  \begin{description}
    \item[string.h]
    Libreria standard C, dove sono presenti le principali funzioni per la gestione delle stringhe.
  \end{description}
  
  
  \begin{description}
    \item[strarg.h]
    Libreria standard C, sono presenti le macro e le funzioni per la getsione degli argomenti delle funzioni.
  \end{description}
  
  
  \begin{description}
    \item[wchar.h]
    Libreria standard C, dove sono presenti le principali funzioni per la gestione delle stringhe in formato wchar.
  \end{description}
  
  \begin{description}
    \item[error.h]
    Libreria standard C, piccola libreria che permette di gestire in modo molto semplice gli errori a livello sistema.
  \end{description}
  
 \section{Gestione errori}
    Sempre a causa dell' ampiezza del progetto, è stato necessario introdurre una semplice gestione degli errori. L'implementazione di questo 
    avviene nella libreria errno.h. \\
    Questa gestione viene realizzata principalmente mediante delle funzioni che agiscono su delle variabili globali che contengono lo stato attuale.  
     \begin{itemize}
      \item \textbf{errno} : word che contiene un codice identificativo per l'errore che si è verificato. 
     \end{itemize}
     
    \begin{itemize}
     \item \textbf{str\_errno} : stringa che contiene la spiegazione dell'errore contenuto in errno. 
    \end{itemize}

    Nonostante sia possibile accedere direttamente alle variabili e modificarne il contenuto, è consigliato usare le successive funzioni messe a disposizione dalla libreria errno.h. 
    
      \begin{description}
       \item[perror]
	    Funzione che stampa la stringa di errore accodata alla stringa passata come argomento
       \end{description}

  \begin{description}
   \item[set\_errno] 
	    Funzione che setta le variabili di errore globali ai valori specificati come argomento.
   \end{description}
    
   \begin{description}
    \item[reset\_errno]
	Funzione che resetta le variabili di errore, inserendo il valore di default (successo).  
   \end{description}

    \section{Conclusioni}
      In questo capitolo sono state presentate in maniera generica tutte le modifiche riguardanti il nucleo. \\
      Per maggiori informazioni si rimanda ai sorgenti, che sono accompagnati da una discreta quantità di commenti. \\
\clearpage{\pagestyle{empty}\cleardoublepage}